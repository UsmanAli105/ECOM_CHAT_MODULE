# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_service.models.check_order_status_request_bean import CheckOrderStatusRequestBean
from typing import Optional, Set
from typing_extensions import Self

class CheckOrderStatusRequest(BaseModel):
    """
    CheckOrderStatusRequest
    """ # noqa: E501
    channel: StrictInt = Field(description="Channel ID through which the request is made")
    device_id: Optional[StrictStr] = Field(default=None, description="Unique device identifier", alias="deviceId")
    device_type: Optional[StrictStr] = Field(default=None, description="Type of the device", alias="deviceType")
    user_id: Optional[StrictInt] = Field(default=None, description="User ID making the request", alias="userId")
    token: Optional[StrictStr] = Field(default=None, description="Session Token")
    data: Optional[CheckOrderStatusRequestBean] = None
    __properties: ClassVar[List[str]] = ["channel", "deviceId", "deviceType", "userId", "token", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckOrderStatusRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckOrderStatusRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "deviceId": obj.get("deviceId"),
            "deviceType": obj.get("deviceType"),
            "userId": obj.get("userId"),
            "token": obj.get("token"),
            "data": CheckOrderStatusRequestBean.from_dict(obj["data"]) if obj.get("data") is not None else None
        })
        return _obj


